@model LoginModel
@using Nop.Web.Models.Customer;
@using Nop.Core;
@using Nop.Core.Infrastructure;
@{
    Layout = "~/Views/Shared/_ColumnsOne.cshtml";

    //title
    Html.AddTitleParts(T("PageTitle.Login").Text);
    //page class
    Html.AppendPageCssClassParts("html-login-page");

    //register URL with return URL (if specified)
    var registerUrl = Url.RouteUrl("Register");
    if (!String.IsNullOrEmpty(this.Context.Request.QueryString["returnUrl"]))
    {
        var webHelper = EngineContext.Current.Resolve<IWebHelper>();
        registerUrl = webHelper.ModifyQueryString(registerUrl, "returnurl=" + HttpUtility.UrlEncode(this.Context.Request.QueryString["returnUrl"]), null);
    }
}
<div class="page login-page">
    <div class="row">
        <div class="col-md-12">
            <div class="page-title">
                <h1>@T("Account.Login.Welcome")</h1>
            </div>
        </div>
    </div>
    @Html.Partial("_ExternalAuthentication.AssociateMessage")
    @Html.Partial("_ExternalAuthentication.Errors")
    <div class="page-body">
        <div class="row">
            <div class="customer-blocks">
                <div class="col-md-6 col-sm-6">
                    @if (Model.CheckoutAsGuest)
                    {
                        <div class="new-wrapper checkout-as-guest-or-register-block">
                            <div class="title">
                                <strong>@T("Account.Login.CheckoutAsGuestOrRegister")</strong>
                            </div>
                            <div class="text">
                                @Html.Action("TopicBlock", "Topic", new { systemName = "CheckoutAsGuestOrRegister" })
                            </div>
                            <div class="buttons">
                                <input type="button" class="button-1 checkout-as-guest-button" onclick="location.href='@Url.RouteUrl("Checkout")'" value="@T("Account.Login.CheckoutAsGuest")" />
                                <input type="button" class="button-1 register-button" onclick="location.href='@registerUrl'" value="@T("Account.Register")" />
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="new-wrapper register-block">
                            <div class="title">
                                <strong>@T("Account.Login.NewCustomer")</strong>
                            </div>
                            <div class="text">
                                @T("Account.Login.NewCustomerText")
                            </div>
                            <div class="buttons">
                                <input type="button" class="button-1 register-button" onclick="location.href='@registerUrl'" value="@T("Account.Register")" />
                            </div>
                        </div>
                    }
                </div>
                <div class="col-md-6 col-sm-6">
                    <div class="returning-wrapper fieldset form-horizontal">
                        @using (Html.BeginForm())
                        {
                            var validationSummary = Html.ValidationSummary(true, T("Account.Login.Unsuccessful").Text);
                            <div class="title">
                                <strong>@T("Account.Login.ReturningCustomer")</strong>
                            </div>
                            if (!MvcHtmlString.IsNullOrEmpty(validationSummary))
                            {
                                <div class="message-error">@validationSummary</div>
                            }
                            <div class="form-fields">
                                @if (Model.UsernamesEnabled)
                                {
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.Username, new { @class="col-sm-3 col-md-4 control-label" }, ":")
                                        <div class="col-sm-6">
                                            @Html.TextBoxFor(m => m.Username, new { @class = "username form-control", autofocus = "autofocus" })
                                            @Html.ValidationMessageFor(m => m.Username)
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.Email, new { @class = "col-sm-3 col-md-4 control-label" }, ":")
                                        <div class="col-sm-8 col-md-6">
                                            @Html.TextBoxFor(m => m.Email, new { @class = "email form-control", autofocus = "autofocus" })
                                            @Html.ValidationMessageFor(m => m.Email)
                                        </div>
                                    </div>
                                }
                                <div class="form-group">
                                    @Html.LabelFor(m => m.Password, new { @class = "col-sm-3 col-md-4 control-label" }, ":")
                                    <div class="col-sm-8 col-md-6">
                                        @Html.PasswordFor(m => m.Password, new { @class = "password form-control" })
                                        @Html.ValidationMessageFor(m => m.Password)
                                    </div>
                                </div>
                                <div class="form-group reversed">
                                    <div class="col-md-offset-4 col-md-8 col-sm-offset-3 col-sm-9">
                                        @Html.CheckBoxFor(m => m.RememberMe)
                                        @Html.LabelFor(m => m.RememberMe)
                                        <span class="forgot-password">
                                            @Html.RouteLink(T("Account.Login.ForgotPassword").Text, "PasswordRecovery")
                                        </span>
                                    </div>
                                </div>
                                @if (Model.DisplayCaptcha)
                                {
                                    <div class="captcha-box">
                                        @Html.Raw(Html.GenerateCaptcha())
                                    </div>
                                }
                            </div>
                            <div class="buttons">
                                <input class="button-1 login-button" type="submit" value="@T("Account.Login.LoginButton")" />
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <div class="external-authentication">
                    @Html.Action("ExternalMethods", "ExternalAuthentication")
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                @Html.Action("TopicBlock", "Topic", new { systemName = "LoginRegistrationInfo" })
            </div>
        </div>
    </div>
</div>
